scalar Date

schema {
	query: Query
}

type Query {
	me: User!
	user(id: ID!): User
	allUsers: [User]
	search(term: String!): [SearchResult!]!
	myChats: [Chat!]!
}
input MessageInput {
	content: String
	author: String
}

type Message {
	id: ID!
	content: String
	author: String
}
type Mutation {
	createMessage(input: MessageInput): Message
	updateMessage(id: ID!, input: MessageInput): Message
}

enum Role {
	USER
	ADMIN
}

interface Node {
	id: ID!
}

union SearchResult = User | Chat | ChatMessage

type User implements Node {
	id: ID!
	username: String!
	email: String!
	role: Role!
}

type Chat implements Node {
	id: ID!
	users: [User!]!
	messages: [ChatMessage!]!
}

type ChatMessage implements Node {
	id: ID!
	content: String!
	time: Date!
	user: User!
}
