type Query {
	_: Int
	albums(options: PageQueryOptions): AlbumsPage
	album(id: ID!): Album
	comments(options: PageQueryOptions): CommentsPage
	comment(id: ID!): Comment
	photos(options: PageQueryOptions): PhotosPage
	photo(id: ID!): Photo
	posts(options: PageQueryOptions): PostsPage
	post(id: ID!): Post
	todos(options: PageQueryOptions): TodosPage
	todo(id: ID!): Todo
	users(options: PageQueryOptions): UsersPage
	user(id: ID!): User
}

type Mutation {
	_: Int
	createAlbum(input: CreateAlbumInput!): Album
	updateAlbum(id: ID!, input: UpdateAlbumInput!): Album
	deleteAlbum(id: ID!): Boolean
	createComment(input: CreateCommentInput!): Comment
	updateComment(id: ID!, input: UpdateCommentInput!): Comment
	deleteComment(id: ID!): Boolean
	createPhoto(input: CreatePhotoInput!): Photo
	updatePhoto(id: ID!, input: UpdatePhotoInput!): Photo
	deletePhoto(id: ID!): Boolean
	createPost(input: CreatePostInput!): Post
	updatePost(id: ID!, input: UpdatePostInput!): Post
	deletePost(id: ID!): Boolean
	createTodo(input: CreateTodoInput!): Todo
	updateTodo(id: ID!, input: UpdateTodoInput!): Todo
	deleteTodo(id: ID!): Boolean
	createUser(input: CreateUserInput!): User
	updateUser(id: ID!, input: UpdateUserInput!): User
	deleteUser(id: ID!): Boolean
}

type Album {
	id: ID
	title: String
	user: User
	photos(options: PageQueryOptions): PhotosPage
}

input CreateAlbumInput {
	title: String!
	userId: ID!
}

input UpdateAlbumInput {
	title: String
	userId: ID
}

type Comment {
	id: ID
	name: String
	email: String
	body: String
	post: Post
}

input CreateCommentInput {
	name: String!
	email: String!
	body: String!
}

input UpdateCommentInput {
	name: String
	email: String
	body: String
}

input PageQueryOptions {
	paginate: PaginateOptions
	slice: SliceOptions
	sort: [SortOptions]
	operators: [OperatorOptions]
	search: SearchOptions
}

input PaginateOptions {
	page: Int
	limit: Int
}

input SliceOptions {
	start: Int
	end: Int
	limit: Int
}

input SortOptions {
	field: String
	order: SortOrderEnum
}

enum SortOrderEnum {
	ASC
	DESC
}

input OperatorOptions {
	kind: OperatorKindEnum
	field: String
	value: String
}

enum OperatorKindEnum {
	GTE
	LTE
	NE
	LIKE
}

input SearchOptions {
	q: String
}

type PostsPage {
	data: [Post]
	links: PaginationLinks
	meta: PageMetadata
}

type CommentsPage {
	data: [Comment]
	links: PaginationLinks
	meta: PageMetadata
}

type AlbumsPage {
	data: [Album]
	links: PaginationLinks
	meta: PageMetadata
}

type PhotosPage {
	data: [Photo]
	links: PaginationLinks
	meta: PageMetadata
}

type TodosPage {
	data: [Todo]
	links: PaginationLinks
	meta: PageMetadata
}

type UsersPage {
	data: [User]
	links: PaginationLinks
	meta: PageMetadata
}

type PaginationLinks {
	first: PageLimitPair
	prev: PageLimitPair
	next: PageLimitPair
	last: PageLimitPair
}

type PageLimitPair {
	page: Int
	limit: Int
}

type PageMetadata {
	totalCount: Int
}

type Photo {
	id: ID
	title: String
	url: String
	thumbnailUrl: String
	album: Album
}

input CreatePhotoInput {
	title: String!
	url: String!
	thumbnailUrl: String!
}

input UpdatePhotoInput {
	title: String
	url: String
	thumbnailUrl: String
}

type Post {
	id: ID
	title: String
	body: String
	user: User
	comments(options: PageQueryOptions): CommentsPage
}

input CreatePostInput {
	title: String!
	body: String!
}

input UpdatePostInput {
	title: String
	body: String
}

type Todo {
	id: ID
	title: String
	completed: Boolean
	user: User
}

input CreateTodoInput {
	title: String!
	completed: Boolean!
}

input UpdateTodoInput {
	title: String
	completed: Boolean
}

type User {
	id: ID
	name: String
	username: String
	email: String
	address: Address
	phone: String
	website: String
	company: Company
	posts(options: PageQueryOptions): PostsPage
	albums(options: PageQueryOptions): AlbumsPage
	todos(options: PageQueryOptions): TodosPage
}

type Address {
	street: String
	suite: String
	city: String
	zipcode: String
	geo: Geo
}

type Geo {
	lat: Float
	lng: Float
}

type Company {
	name: String
	catchPhrase: String
	bs: String
}

input CreateUserInput {
	name: String!
	username: String!
	email: String!
	address: AddressInput
	phone: String
	website: String
	company: CompanyInput
}

input UpdateUserInput {
	name: String
	username: String
	email: String
	address: AddressInput
	phone: String
	website: String
	company: CompanyInput
}

input AddressInput {
	street: String
	suite: String
	city: String
	zipcode: String
	geo: GeoInput
}

input GeoInput {
	lat: Float
	lng: Float
}

input CompanyInput {
	name: String
	catchPhrase: String
	bs: String
}
